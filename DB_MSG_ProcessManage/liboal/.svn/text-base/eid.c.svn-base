/**********************************************************************
* Copyright (c) 2009 Wuhan Tecom Co., Ltd.
* All Rights Reserved
* No portions of this material may be reproduced in any form without the
* written permission of:
*   Wuhan Tecom Co., Ltd.
*   #18, Huaguang Road
*   Wuhan, PR China 430074
* All information contained in this document is Wuhan Tecom Co., Ltd.
* company private, proprietary, and trade secret.
***********************************************************************/

#include "tcm.h"
#include "tcm_util.h"
#include "tcm_eid.h"
#include <conflib.h>

tcmParamInfo portforward_tab_paras[] =
{
    { PARA_PORTFORWARD_NAME,                  "name" },
    { PARA_PORTFORWARD_PROTOCOL,              "protocol" },
    { PARA_PORTFORWARD_START_INCOMING_PORT,   "startIncomingPort" },
    { PARA_PORTFORWARD_END_INCOMING_PORT,     "endIncomingPort" },
    { PARA_PORTFORWARD_START_FORWARD_PORT,    "startForwardPort" },
    { PARA_PORTFORWARD_END_FORWARD_PORT,      "endForwardPort" },
    { PARA_PORTFORWARD_SERVER_IP,             "serverIp" },
    { PARA_PORTFORWARD_END,                   NULL },
};

tcmParamInfo firewall_tab_paras[] = 
{
    { PARA_FIREWALL_SRCIP,                    "sourceIp" },
    { PARA_FIREWALL_SRCMASK,                  "sourceMask" },
    { PARA_FIREWALL_SRCPORT,                  "sourcePort" },
    { PARA_FIREWALL_DSTIP,                    "destinationIp" },
    { PARA_FIREWALL_DSTMASK,                  "destinationMask" },
    { PARA_FIREWALL_DSTPORT,                  "destinationPort" },
    { PARA_FIREWALL_PROTOCOL,                 "protocol" },
    { PARA_FIREWALL_END,                      NULL },
};
/*Begin for tr069 */
typedef enum
{
    L3FORWARD_TAB_ENBLE = 1,
    L3FORWARD_TAB_DESTIP,
    L3FORWARD_TAB_SOURCEIP,
    L3FORWARD_TAB_END,
} L3FORWARD_TAB_PARA_ID;

tcmParamInfo l3forward_tab_paras[] =
{
    { L3FORWARD_TAB_ENBLE,  "enble" },
    { L3FORWARD_TAB_DESTIP,  "DestIPAddress" },
    { L3FORWARD_TAB_SOURCEIP,   "SourceIPAddress" },
    { L3FORWARD_TAB_END,  NULL },
};
/*End for tr069 */

tcmEntityInfo entityInfoArray[] = {

  /*Begin for tr069*/
   {ID_SYS,
    "SYS",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

	 {ID_DEVICESUMMARY,
    "DEVICESUMMARY",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

 {ID_DEVICE,
    "DEVICE",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

	 {ID_DEVICECONFIG,
    "DEVICECONFIG",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

	 { ID_TR069SERVER,
    "TR069SERVER",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

	{ID_TIME,
    "TIME",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},
    
	
   {ID_IPPING,
    "IPPING",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

{ ID_L3FORWARD,
    "L3FORWARD",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
     l3forward_tab_paras,
    32, L3FORWARD_TAB_END},
/* End for tr069 */

   {ID_LAN,
    "lan",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},


   {ID_DHCPD,
    "dhcpd",
    "/bin/dhcpd",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_WAN,
    "wan",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_DNSMASQ,
    "dnsmasq",
    "/bin/dnsmasq",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

    {ID_SNTP,
    "sntp",
    "/bin/sntp",
    "",               /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_PORTFORWARD,
    "portforward",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    portforward_tab_paras,
    MAXTABLE_PORTFORWARD,
    PARA_PORTFORWARD_END},

   {ID_FIREWALL,
    "firewall",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    firewall_tab_paras,
    MAXTABLE_FIREWALL,
    PARA_FIREWALL_END},

   {ID_DMZ,
    "dmz",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_END,
    "end",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_SYSLOGD,
    "syslogd",
    "/sbin/syslogd",
    "-n",               /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_INETD,
    "inetd",
    "/sbin/inetd",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_PCSCD,
    "pcscd",
    "/bin/pcscd",
    "-C -f",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},


   {ID_THTTPD,
    "thttpd",
    "/bin/thttpd",
    "-D -C /etc/httpd/thttpd.conf",                 /* run args */
    APPCFG_MULTIPLE_INSTANCES,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_CONSOLE,
    "console",
    "",
    "",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_SCHED,
    "sched",
    "/bin/sched",
    "",                 /* run args */
    APPCFG_MESSAGING_CAPABLE,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_PNWK,
    "pnwk",
    "/bin/pnwk",
    "",                 /* run args */
    APPCFG_LAUNCH_IN_STAGE_1 | APPCFG_MESSAGING_CAPABLE,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_SDKD,
    "sdkd",
    "/usr/sdkd",
    "-c /etc/sysconfig/wimax/sdk.conf -f",                 /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

   {ID_AUTOCM,
    "auto_cm",
    "/usr/auto_cm",
    "-d",               /* run args */
    0,
    0,                  /* Back Blog */
    0,                  /* Port */
    TRUE,               /* isFeatureCompiledIn */
    NULL,
    0, 0},

};

#define NUM_ENTITY_INFO_ENTRIES (sizeof(entityInfoArray)/sizeof(tcmEntityInfo))


UINT32 tcmEid_getNumberOfEntityInfoEntries(void)
{
   return NUM_ENTITY_INFO_ENTRIES;
}


const tcmEntityInfo *tcmEid_getFirstEntityInfo(void)
{
   return &(entityInfoArray[0]);
}


const tcmEntityInfo *tcmEid_getEntityInfo(tcmEntityId eid)
{
   UINT32 i=0;

   while (i < NUM_ENTITY_INFO_ENTRIES)
   {
      if (entityInfoArray[i].eid == eid)
      {
         return (&entityInfoArray[i]);
      }

      i++;
   }

   return NULL;
}

const tcmEntityInfo *tcmEid_getEntityInfoByStringName(const char *name)
{
   UINT32 i=0;

   if (name == NULL)
   {
      return NULL;
   }

   while (i < NUM_ENTITY_INFO_ENTRIES)
   {
      if (!strcmp(entityInfoArray[i].name, name))
      {
         return (&entityInfoArray[i]);
      }

      i++;
   }

   return NULL;
}

SINT32 tcmEid_getPid(void)
{
   return (getpid());
}

