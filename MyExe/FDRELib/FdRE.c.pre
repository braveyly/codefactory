#include <stdio.h>
#include <string.h>
#include "FdRE.h"

int uint8RESetExpression( uint8_t* reStr, int reLen)
{
   int i = reLen;
   int lenStart = 0, lenType = 0, firstLenFlag = 0; 
   
   //sanity check
   while( (reStr[reLen-i] - MUL_BYTES) && i ){i--;}   
   if(!i)
   {
      printf( "RE Format is wrong\n" );
	  return -1;
   }

   gPatternStr = (uint8_t*)malloc(sizeof(uint8_t)*reLen);
   memset( gPatternStr, 0, reLen );
   memcpy( gPatternStr, reStr, reLen );
   gPatternLen = reLen;

   //parse value type
   i = reLen;
   while(i)
   {
      if( !(reStr[reLen-i] - LEN_BYTE) && !firstLenFlag )
	  {
		  lenStart = reLen - i;
		  firstLenFlag = 1;
	  }

	  if( !(reStr[reLen-i] - LEN_BYTE) && firstLenFlag )
	     lenType++;
	  i--;
   }
   printf( "lenStart %d lenType %d\n", lenStart, lenType );
   gValLenByteType = lenType;
   gValLenByteStart = lenStart;

}

int uint8RESetValueLenOffSet( int offset )
{
   gValLenOffSet = offset;   
}

#define NOT_SRC_ENOUGH_LENGTH -1
#define NO_MATCH -2
int uint8REParse( uint8_t* srcStr, int srcLen, uint8_t* resStr, int* resLen, int* offSet )
{
   int i =0 , j = 0, startPos = 0;
   uint8_t u8ValLen;
   uint16_t u16ValLen;
   uint32_t u32ValLen;

   i = startPos;
   while( i < srcLen )
   {
      if( gPatternStr[j] != LEN_BYTE && 
	  	  gPatternStr[j] != SINGLE_BYTE && 
	  	  gPatternStr[j] != MUL_BYTES )
      {       
		 if( srcStr[i] != gPatternStr[j] )
		 {
		    startPos++;
			i = startPos;
			j = 0;
		    continue;
		 }
      }

	  if( j == gValLenByteStart )
	  {
	     if( 1 == gValLenByteType )
	     {
		 	u8ValLen = srcStr[i];
			i++;
			j++;
			if( i >= srcLen )
				return NOT_SRC_ENOUGH_LENGTH;
			gValueLen = u8ValLen;
	     }
		 else if( 2 == gValLenByteType )
		 {
		    memcpy( &u16ValLen, srcStr+i, 2 );
			i+=2;
			j+=2;
			if( i >= srcLen )
				return NOT_SRC_ENOUGH_LENGTH;
			gValueLen = u16ValLen;
		 }
		 else if( 4 == gValLenByteType )
		 {
		    memcpy( &u32ValLen, srcStr+i, 4 );
			i+4;
			j+4;
			if( i >= srcLen )
				return NOT_SRC_ENOUGH_LENGTH;
			gValueLen = u32ValLen;
		 }
		 continue;
	  }

      if( MUL_BYTES == gPatternStr[j] )
      {
         memcpy( resStr , srcStr+startPos, j + gValueLen );
		 *resLen =  j + gValueLen;
		 *offSet = startPos;
		 			if( i + gValueLen > srcLen )
				return NOT_SRC_ENOUGH_LENGTH;
		 break;
      }	  
	  i++;
	  j++;
   }
   
   if( i > srcLen)
	   return NO_MATCH;

   return 0;
}

